// Generated by CoffeeScript 1.12.4
'use strict';
var defaultSettings, each, fs, glob, sysPath,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sysPath = require('path');

fs = require('fs');

each = require('async-each');

glob = require('glob');

defaultSettings = function(extname) {
  switch (extname) {
    case 'jade':
      return {
        regexp: /^\s*(?:include|extends)\s+(.+)/
      };
    case 'styl':
      return {
        regexp: /^\s*@(?:import|require)\s+['"]?([^'"]+)['"]?/,
        exclusion: /(?:nib|url)/,
        supportsGlob: true,
        extensionsList: ['css'],
        handleDirectory: function(fullPath) {
          return sysPath.join(fullPath, 'index.styl');
        }
      };
    case 'less':
      return {
        regexp: /^\s*@import\s+['"]([^'"]+)['"]/
      };
    case 'scss':
    case 'sass':
      return {
        regexp: /^\s*@import\s+['"]?([^'"]+)['"]?/,
        prefix: '_',
        exclusion: /^compass/,
        extensionsList: ['scss', 'sass']
      };
  }
};

module.exports = function(arg) {
  var exclusion, extension, extensionsList, handleDirectory, parseDeps, prefix, ref, regexp, rootPath, shallow, supportsGlob;
  ref = arg != null ? arg : {}, rootPath = ref.rootPath, extension = ref.extension, regexp = ref.regexp, prefix = ref.prefix, exclusion = ref.exclusion, extensionsList = ref.extensionsList, supportsGlob = ref.supportsGlob, handleDirectory = ref.handleDirectory, shallow = ref.shallow;
  parseDeps = function(data, path, depsList, callback) {
    var altExts, deps, directoryFiles, dirs, extFiles, globs, parent, paths, prefixed;
    if (path) {
      parent = sysPath.dirname(path);
    }
    paths = data.toString().split('\n').map(function(line) {
      return line.match(regexp);
    }).filter(function(match) {
      return (match != null ? match.length : void 0) > 0;
    }).map(function(match) {
      return match[1];
    }).filter(function(path) {
      if ('[object Array]' !== toString.call(exclusion)) {
        exclusion = [exclusion];
      }
      return !!path && !exclusion.some(function(_exclusion) {
        switch (false) {
          case !(_exclusion instanceof RegExp):
            return _exclusion.test(path);
          case '[object String]' !== toString.call(_exclusion):
            return _exclusion === path;
          default:
            return false;
        }
      });
    });
    dirs = [];
    if (parent) {
      dirs.push(parent);
    }
    if (rootPath && rootPath !== parent) {
      dirs.push(rootPath);
    }
    deps = [];
    dirs.forEach(function(dir) {
      return paths.forEach(function(path) {
        return deps.push(sysPath.join(dir, path));
      });
    });
    if (supportsGlob) {
      globs = [];
      deps.forEach(function(path) {
        var results;
        results = glob.sync(path);
        if (results.length) {
          return globs = globs.concat(results);
        } else {
          return globs.push(path);
        }
      });
      deps = globs;
    }
    if (extension) {
      extFiles = [];
      deps.forEach(function(path) {
        if (("." + extension) !== sysPath.extname(path)) {
          return extFiles.push(path + "." + extension);
        }
      });
      deps = deps.concat(extFiles);
    }
    if (handleDirectory != null) {
      directoryFiles = [];
      deps.forEach(function(path) {
        var directoryPath;
        directoryPath = handleDirectory(path);
        return directoryFiles.push(directoryPath);
      });
      deps = deps.concat(directoryFiles);
    }
    if (prefix != null) {
      prefixed = [];
      deps.forEach(function(path) {
        var dir, file;
        dir = sysPath.dirname(path);
        file = sysPath.basename(path);
        if (0 !== file.indexOf(prefix)) {
          return prefixed.push(sysPath.join(dir, "" + prefix + file));
        }
      });
      deps = deps.concat(prefixed);
    }
    if (extensionsList.length) {
      altExts = [];
      deps.forEach(function(path) {
        var dir;
        dir = sysPath.dirname(path);
        return extensionsList.forEach(function(ext) {
          var base;
          if (("." + ext) !== sysPath.extname(path)) {
            base = sysPath.basename(path, "." + extension);
            return altExts.push(sysPath.join(dir, base + "." + ext));
          }
        });
      });
      deps = deps.concat(altExts);
    }
    if (deps.length) {
      return each(deps, function(path, callback) {
        if (indexOf.call(depsList, path) >= 0) {
          return callback();
        } else {
          depsList.push(path);
          if (shallow) {
            return callback();
          } else {
            return fs.readFile(path, {
              encoding: 'utf8'
            }, function(err, data) {
              if (err) {
                return callback();
              }
              return parseDeps(data, path, depsList, callback);
            });
          }
        }
      }, callback);
    } else {
      return callback();
    }
  };
  return function(data, path, callback) {
    var def, depsList, run;
    depsList = [];
    if (extension == null) {
      extension = sysPath.extname(path).slice(1);
    }
    def = defaultSettings(extension);
    if (regexp == null) {
      regexp = def.regexp;
    }
    if (prefix == null) {
      prefix = def.prefix;
    }
    if (exclusion == null) {
      exclusion = def.exclusion;
    }
    if (extensionsList == null) {
      extensionsList = def.extensionsList || [];
    }
    if (supportsGlob == null) {
      supportsGlob = def.supportsGlob || false;
    }
    if (shallow == null) {
      shallow = def.shallow || false;
    }
    if (handleDirectory == null) {
      handleDirectory = def.handleDirectory;
    }
    run = function() {
      return parseDeps(data, path, depsList, function() {
        return callback(null, depsList);
      });
    };
    if (data != null) {
      return run();
    } else {
      return fs.readFile(path, {
        encoding: 'utf8'
      }, function(err, fileContents) {
        if (err) {
          return callback(err);
        }
        data = fileContents;
        return run();
      });
    }
  };
};
